#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100
char stk[MAX];
int top = -1;
int isEmpty() {
    return top == -1;}
int isFull() {
    return top == MAX - 1;
}
char peek() {
    if (isEmpty())
        return '\0';  
    return stk[top];
}
char pop() {
    if (isEmpty())
        return '\0';  
    return stk[top--];
}
void push(char oper) {
    if (isFull())
        printf("Stack Full!!!!\n");
    else
        stk[++top] = oper;
}
int checkIfOperand(char ch) {
    return (ch>= 'a' &&ch<= 'z') || (ch>= 'A' &&ch<= 'Z');
}
int precedence(char ch) {
    switch (ch) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}
void covertInfixToPostfix(char* expression) {
    char postfix[MAX];
    int i, j = 0;
    for (i = 0; expression[i]; ++i) {
        if (checkIfOperand(expression[i])) {
            postfix[j++] = expression[i];
        } else if (expression[i] == '(') {
            push(expression[i]);
} else if (expression[i] == ')') {
            while (!isEmpty() && peek() != '(') {
                postfix[j++] = pop();
            }
            if (!isEmpty() && peek() == '(') {
                pop();  // Discard the '('
            }
        } else {
            while (!isEmpty() && precedence(expression[i]) <= precedence(peek())) {
                postfix[j++] = pop();
            }
            push(expression[i]);}
    }
while (!isEmpty()) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0';
    printf("Postfix Expression: %s\n", postfix);
}
int main() {
    char expression[MAX];
    printf("Enter the infix expression: ");
    fgets(expression, MAX, stdin);
    size_tlen = strlen(expression);
    if (len> 0 && expression[len - 1] == '\n') {
        expression[len - 1] = '\0';
    }
    covertInfixToPostfix(expression);
    return 0;
}

