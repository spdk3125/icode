#include <stdio.h>
#include <stdlib.h>

#define MAX 10

typedef struct stack {
  int items[MAX];
  int top;
} st;

void createEmptyStack(st *s) {
  s->top = -1;
}

int isfull(st *s) {
  return s->top == MAX - 1;
}

int isempty(st *s) {
  return s->top == -1;
}

void push(st *s, int newitem) {
  if (isfull(s)) {
    printf("Cannot push: Stack is full\n");
  } else {
    s->items[++s->top] = newitem;
  }
}

void pop(st *s) {
  if (isempty(s)) {
    printf("Cannot pop: Stack is empty\n");
  } else {
    printf("Item popped = %d\n", s->items[s->top]);
    s->top--;
  }
}

int peek(st *s) {
  if (isempty(s)) {
    // Indicate error condition (replace with desired error handling)
    return -1; // Or throw an exception
  }
  return s->items[s->top];
}

int size(st *s) {
  return s->top + 1;
}

void printStack(st *s) {
  if (isempty(s)) {
    printf("Stack is empty\n");
  } else {
    printf("Stack: ");
    for (int i = 0; i < s->top + 1; i++) { // Use s->top + 1 for actual elements
      printf("%d ", s->items[i]);
    }
    printf("\n");
  }
}

int main() {
  int ch, item;
  st *s = (st *)malloc(sizeof(st));
  int value = peek(s);

  do {
    printf("\nStack Operations:\n");
    printf("1. Push\n");
    printf("2. Pop\n");
    printf("3. Peek\n");
    printf("4. Size\n");
    printf("5. Print Stack\n");
    printf("6. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &ch);

    switch (ch) {
      case 1:
        printf("Enter the item to push: ");
        scanf("%d", &item);
        push(s, item);
        break;
      case 2:
        pop(s);
        break;
      case 3:
        if (value != -1) {
          printf("Top element: %d\n", value);
        }
        break;
      case 4:
        printf("Stack size: %d\n", size(s));
        break;
      case 5:
        printStack(s);
        break;
      case 6:
        printf("Exiting...\n");
        break;
      default:
        printf("Invalid choice, please try again.\n");
    }
  } while (ch != 6);

  free(s);
  return 0;
}
